@startuml

package "controller" {

    class AccountController {
        +getAllAccounts(): List<Account>
        +getAccountById(accountId: Long): Account
        +registerAccount(accountDto: AccountDto): String
        +updateAccount(accountId: Long, accountDto: AccountDto): Account
        +banAccount(accountId: Long): String
        +unbanAccount(accountId: Long): String
        +deleteAccount(accountId: Long): String
        +login(accountDto: AccountDto): String
        +logout(): String
    }

    class CoinsController {
        +addCoinsToAccount(accountId: Long, coinsToAdd: int): String
        +subtractCoinsFromAccount(accountId: Long, coinsToSubtract: int): String
        +viewCoinsInAccount(accountId: Long): int
    }

    class ItemController {
        +addItems(items: List<Item>): String
        +findAllItems(): List<Item>
        +findItemByName(name: String): Item
        +deleteItem(id: Long): ResponseEntity<String>
        +updateItem(item: Item): Item
        +getItemsByCategory(category: ItemCategory): List<Item>
        +getItemsByAccountId(accountId: Long): List<Item>
    }

    class OrderController {
        +readAll(): List<OrderDto>
        +read(id: long): OrderDto
        +createOrder(accountId: Long): OrderDto
        +update(id: long, updatedOrderDto: OrderDto): OrderDto
        +delete(id: String)
        +getOrderHistoryByAccountId(accountId: Long): List<Order>
        +getOrderDetailsByAccountIdAndOrderId(accountId: Long, orderId: String): List<OrderHistory>
    }

    class PlayerController {
        +readAllPlayers(): List<PlayerDto>
        +readPlayer(id: Long): PlayerDto
        +createPlayer(playerDto: PlayerDto): PlayerDto
        +updatePlayer(id: Long, updatedPlayerDto: PlayerDto): PlayerDto
        +deletePlayer(id: Long)
        +getTop5PlayersByLevel(): List<PlayerDto>
        +getAllPlayersSortedByLevel(): List<PlayerDto>
        +searchPlayersByName(name: String): List<PlayerDto>
    }

    class ShoppingCartController {
        +getItemsInCartByAccountId(accountId: Long): List<ShoppingCartItem>
        +addItemToCart(shoppingCartId: Long, itemId: Long, quantity: int)
        +updateCartItem(shoppingCartId: Long, itemId: Long, quantity: int)
        +removeItemFromCart(shoppingCartId: Long, itemId: Long)
        +clearCart(shoppingCartId: Long)
    }

}

package "Dto" {

    class AccountDto {
        -id: Long
        -salutation: String
        -additionalInfo: String
        -email: String
        -username: String
        -password: String
        -repeatPassword: String
        -country: String
        -role: Role
        -status: Status
        -coins: int
        -order: List<Order>
        +GETTER & SETTER
    }

    class ItemDto {
        -itemId: Long
        -name: String
        -price: int
        -description: String
        -imageUrl: String
        -category: ItemCategory
        +GETTER & SETTER
    }

    class OrderDto {
        -id: Long
        -orderDate: LocalDateTime
        -account: AccountDto
        +GETTER & SETTER
    }

    class PlayerDto {
        -id: Long
        -name: String
        -empire: Empire
        -level: int
        -accountId: Long
        +GETTER & SETTER
    }

}

package "model" {

    class Account {
        -id: Long
        -salutation: Salutation
        -additionalInfo: String
        -email: String
        -username: String
        -password: String
        -repeatPassword: String
        -country: String
        -role: Role
        -status: Status
        -coins: int
        -players: List<Player>
        -order: List<Order>
        -shoppingCart: ShoppingCart
        +GETTER & SETTER
    }

    class CoinTransaction {
            -id: Long
            -coins: int
            -transactionType: String
            -account: Account
            +GETTER & SETTER

    class Item {
        -itemId: Long
        -name: String
        -price: int
        -description: String
        -imageUrl: String
        -category: ItemCategory
        +GETTER & SETTER
    }

    class Order {
        -id: Long
        -orderDate: LocalDateTime
        -account: Account
        +GETTER & SETTER
    }

    class OrderHistory {
        -id: Long
        -order: Order
        -item: Item
        -itemName: String
        -itemPrice: int
        -quantity: int
        +GETTER & SETTER
    }

    class Player {
        -id: Long
        -name: String
        -empire: Empire
        -level: int
        -accountId: Long
        +GETTER & SETTER
    }

    class ShoppingCart {
        -id: Long
        -account: Account
        -cartItems: List<ShoppingCartItem>
        +GETTER & SETTER
    }

    class ShoppingCartItem {
        -id: Long
        -shoppingCart: ShoppingCart
        -item: Item
        -itemName: String
        -itemPrice: int
        -quantity: int
        +GETTER & SETTER
    }

    enum Empire {
        JINNO
        SHINSOO
        CHUNJO
    }

    enum ItemCategory {
        VIEW_ALL
        WAFFEN
        RÃœSTUNG
        SCHMUCK
        SONSTIGES
    }

    enum Role {
        USER
        ADMIN
    }

    enum Salutation {
        MALE
        FEMALE
        OTHER
    }

    enum Status {
        ACTIVE
        BANNED
    }

}

package "repository" {

    interface JpaRepository

    class AccountRepository {
        +findByUsername(username: String): Optional<Account>
        +findByEmail(email: String): Optional<Account>
    }

    class CoinTransactionRepository

    class ItemRepository {
        +findByName(name: String): Item
        +findByCategory(category: ItemCategory): List<Item>
    }

    class OrderHistoryRepository {
        +findByOrder(order: Order): List<OrderHistory>
    }

    class OrderRepository

    class PlayerRepository {
        +countPlayersByAccountId(accountId: Long): int
        +findByName(name: String): List<Player>
    }

    class ShoppingCartItemRepository {
        +findAllByShoppingCartAccountId(accountId: Long): List<ShoppingCartItem>
        +findByShoppingCartIdAndItemId(shoppingCartId: Long, itemId: Long): Optional<ShoppingCartItem>
        +deleteAllByShoppingCartId(shoppingCartId: Long): void
        +deleteAllByIdIn(ids: List<Long>): void
    }

    class ShoppingCartRepository {
        +findByAccountId(accountId: Long): Optional<ShoppingCart>
    }

    class ShoppingCartItemRepository {
        +findAllByShoppingCartAccountId(accountId: Long): List<ShoppingCartItem>
        +findByShoppingCartIdAndItemId(shoppingCartId: Long, itemId: Long): Optional<ShoppingCartItem>
        +deleteAllByShoppingCartId(shoppingCartId: Long): void
        +deleteAllByIdIn(ids: List<Long>): void
    }

    class ShoppingCartRepository {
        +findByAccountId(accountId: Long): Optional<ShoppingCart>
    }

    JpaRepository <|.. AccountRepository
    JpaRepository <|.. CoinTransactionRepository
    JpaRepository <|.. ItemRepository
    JpaRepository <|.. OrderHistoryRepository
    JpaRepository <|.. OrderRepository
    JpaRepository <|.. PlayerRepository
    JpaRepository <|.. ShoppingCartItemRepository
    JpaRepository <|.. ShoppingCartRepository

}







@enduml
